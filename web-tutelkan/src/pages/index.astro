---
import Layout from '../layouts/Layout.astro';
import Hero from '../components/sections/Hero.astro';
import Services from '../components/sections/Services.astro';
import About from '../components/sections/About.astro';
import Support from '../components/sections/Support.astro';
import Stats from '../components/sections/Stats.astro';
import Why from '../components/sections/Why.astro';
import Portfolio from '../components/sections/Portfolio.astro';
import Clients from '../components/sections/Clients.astro';
import Testimonials from '../components/sections/Testimonials.astro';
import Faq from '../components/sections/Faq.astro';
import Contact from '../components/sections/Contact.astro';
import Map from '../components/sections/Map.astro';
import '../styles/home.css';
---
<Layout title="Inicio">
  <Hero />
  <Services />
  <About />
  <Support />
  <Stats />
  <Why />
  <Portfolio />
  <Clients />
  <Testimonials />
  <Faq />
  <Contact />
  <Map />
  <script>
    const observerOptions = { threshold: 0.1, rootMargin: '0px 0px -100px 0px' };
    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('section-visible');
          entry.target.classList.remove('section-hidden');
          const animatedElements = entry.target.querySelectorAll('[class*="animate-"]');
          animatedElements.forEach(el => {
            el.style.animationPlayState = 'running';
          });
          if (entry.target.querySelector('.counter')) {
            startCounters();
          }
        }
      });
    }, observerOptions);
    document.querySelectorAll('.section-animate').forEach(section => {
      section.classList.add('section-hidden');
      observer.observe(section);
    });
    function startCounters() {
      const counters = document.querySelectorAll('.counter');
      counters.forEach(counter => {
        if (counter.dataset.animated) return;
        const target = parseInt(counter.dataset.target);
        const duration = 2000;
        const increment = target / (duration / 16);
        let current = 0;
        const updateCounter = () => {
          current += increment;
          if (current < target) {
            counter.textContent = Math.floor(current).toLocaleString();
            requestAnimationFrame(updateCounter);
          } else {
            counter.textContent = target.toLocaleString();
          }
        };
        counter.dataset.animated = 'true';
        updateCounter();
      });
    }
    document.querySelectorAll('[class*="animate-"]').forEach(el => {
      el.style.animationPlayState = 'paused';
    });
    window.addEventListener('load', () => {
      const heroElements = document.querySelectorAll('#home [class*="animate-"]');
      heroElements.forEach(el => {
        el.style.animationPlayState = 'running';
      });
    });
    document.addEventListener('DOMContentLoaded', () => {
      const heroElements = document.querySelectorAll('#home [class*="animate-"]');
      heroElements.forEach(el => {
        el.style.animationPlayState = 'running';
      });
    });
  </script>
</Layout>
